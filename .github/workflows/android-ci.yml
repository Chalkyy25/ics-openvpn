name: Android CI (APK)

on:
  push:
    branches: [ "**" ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # More heap for all Java tools (Gradle, AAPT2, D8)
      JAVA_TOOL_OPTIONS: -Xms512m -Xmx5g
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dkotlin.daemon.useFallbackStrategy=auto
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

    steps:
      # Pull repo + submodules (OpenVPN3 JNI sources)
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      # Host deps needed by OpenVPN3 build
      - name: Install host build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y swig

      # Make Gradle conservative on memory/parallelism
      - name: Configure Gradle memory
        run: |
          mkdir -p ~/.gradle
          cat > ~/.gradle/gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx5g -Xms512m -XX:MaxMetaspaceSize=1024m -Dfile.encoding=UTF-8 -XX:+HeapDumpOnOutOfMemoryError
          org.gradle.daemon=false
          org.gradle.parallel=false
          org.gradle.configureondemand=true
          org.gradle.workers.max=1
          android.useAndroidX=true
          EOF

      # --- Android SDK cmdline-tools ---
      - name: Install Android cmdline-tools
        run: |
          set -euxo pipefail
          mkdir -p "$ANDROID_HOME/cmdline-tools"
          cd "$ANDROID_HOME/cmdline-tools"
          curl -sSfLo tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q tools.zip
          mv cmdline-tools latest
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_HOME/platform-tools"           >> "$GITHUB_PATH"

      - name: Accept licenses
        run: |
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH"
          yes | sdkmanager --sdk_root="$ANDROID_HOME" --licenses

      - name: Install SDK packages
        run: |
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH"
          sdkmanager --sdk_root="$ANDROID_HOME" \
            "platform-tools" \
            "build-tools;34.0.0" \
            "platforms;android-34" \
            "platforms;android-33" \
            "ndk;25.2.9519653" \
            "ndk;23.2.8568313" \
            "cmake;3.22.1" \
            "cmake;3.10.2.4988404"

      - name: Show modules (for debugging)
        run: |
          echo "===== settings.gradle ====="
          cat settings.gradle || true
          echo "==========================="

      - name: Make gradlew executable
        run: if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      # Build ONLY the :main module to avoid pulling sample modules into the task graph
      - name: Build Debug APK (:main only)
        run: |
          set -e
          ./gradlew -Dorg.gradle.jvmargs="-Xmx5g -Xms512m -XX:MaxMetaspaceSize=1024m -Dfile.encoding=UTF-8" \
                    --no-daemon :main:assembleDebug

      - name: Upload Debug APK(s)
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug
          path: |
            **/build/outputs/apk/**/debug/*.apk
            **/outputs/apk/**/debug/*.apk
          if-no-files-found: warn